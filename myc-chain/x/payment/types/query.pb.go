// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mycchain/payment/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3b6dbafa82e8eb3, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3b6dbafa82e8eb3, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryGetMerchantRequest defines the QueryGetMerchantRequest message.
type QueryGetMerchantRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetMerchantRequest) Reset()         { *m = QueryGetMerchantRequest{} }
func (m *QueryGetMerchantRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMerchantRequest) ProtoMessage()    {}
func (*QueryGetMerchantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3b6dbafa82e8eb3, []int{2}
}
func (m *QueryGetMerchantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMerchantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMerchantRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMerchantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMerchantRequest.Merge(m, src)
}
func (m *QueryGetMerchantRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMerchantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMerchantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMerchantRequest proto.InternalMessageInfo

func (m *QueryGetMerchantRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

// QueryGetMerchantResponse defines the QueryGetMerchantResponse message.
type QueryGetMerchantResponse struct {
	Merchant Merchant `protobuf:"bytes,1,opt,name=merchant,proto3" json:"merchant"`
}

func (m *QueryGetMerchantResponse) Reset()         { *m = QueryGetMerchantResponse{} }
func (m *QueryGetMerchantResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMerchantResponse) ProtoMessage()    {}
func (*QueryGetMerchantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3b6dbafa82e8eb3, []int{3}
}
func (m *QueryGetMerchantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMerchantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMerchantResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMerchantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMerchantResponse.Merge(m, src)
}
func (m *QueryGetMerchantResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMerchantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMerchantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMerchantResponse proto.InternalMessageInfo

func (m *QueryGetMerchantResponse) GetMerchant() Merchant {
	if m != nil {
		return m.Merchant
	}
	return Merchant{}
}

// QueryAllMerchantRequest defines the QueryAllMerchantRequest message.
type QueryAllMerchantRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMerchantRequest) Reset()         { *m = QueryAllMerchantRequest{} }
func (m *QueryAllMerchantRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllMerchantRequest) ProtoMessage()    {}
func (*QueryAllMerchantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3b6dbafa82e8eb3, []int{4}
}
func (m *QueryAllMerchantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMerchantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMerchantRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMerchantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMerchantRequest.Merge(m, src)
}
func (m *QueryAllMerchantRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMerchantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMerchantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMerchantRequest proto.InternalMessageInfo

func (m *QueryAllMerchantRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllMerchantResponse defines the QueryAllMerchantResponse message.
type QueryAllMerchantResponse struct {
	Merchant   []Merchant          `protobuf:"bytes,1,rep,name=merchant,proto3" json:"merchant"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMerchantResponse) Reset()         { *m = QueryAllMerchantResponse{} }
func (m *QueryAllMerchantResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllMerchantResponse) ProtoMessage()    {}
func (*QueryAllMerchantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3b6dbafa82e8eb3, []int{5}
}
func (m *QueryAllMerchantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMerchantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMerchantResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMerchantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMerchantResponse.Merge(m, src)
}
func (m *QueryAllMerchantResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMerchantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMerchantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMerchantResponse proto.InternalMessageInfo

func (m *QueryAllMerchantResponse) GetMerchant() []Merchant {
	if m != nil {
		return m.Merchant
	}
	return nil
}

func (m *QueryAllMerchantResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetPaymentRequest defines the QueryGetPaymentRequest message.
type QueryGetPaymentRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetPaymentRequest) Reset()         { *m = QueryGetPaymentRequest{} }
func (m *QueryGetPaymentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPaymentRequest) ProtoMessage()    {}
func (*QueryGetPaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3b6dbafa82e8eb3, []int{6}
}
func (m *QueryGetPaymentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPaymentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPaymentRequest.Merge(m, src)
}
func (m *QueryGetPaymentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPaymentRequest proto.InternalMessageInfo

func (m *QueryGetPaymentRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// QueryGetPaymentResponse defines the QueryGetPaymentResponse message.
type QueryGetPaymentResponse struct {
	Payment Payment `protobuf:"bytes,1,opt,name=payment,proto3" json:"payment"`
}

func (m *QueryGetPaymentResponse) Reset()         { *m = QueryGetPaymentResponse{} }
func (m *QueryGetPaymentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPaymentResponse) ProtoMessage()    {}
func (*QueryGetPaymentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3b6dbafa82e8eb3, []int{7}
}
func (m *QueryGetPaymentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPaymentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPaymentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPaymentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPaymentResponse.Merge(m, src)
}
func (m *QueryGetPaymentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPaymentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPaymentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPaymentResponse proto.InternalMessageInfo

func (m *QueryGetPaymentResponse) GetPayment() Payment {
	if m != nil {
		return m.Payment
	}
	return Payment{}
}

// QueryAllPaymentRequest defines the QueryAllPaymentRequest message.
type QueryAllPaymentRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPaymentRequest) Reset()         { *m = QueryAllPaymentRequest{} }
func (m *QueryAllPaymentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPaymentRequest) ProtoMessage()    {}
func (*QueryAllPaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3b6dbafa82e8eb3, []int{8}
}
func (m *QueryAllPaymentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPaymentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPaymentRequest.Merge(m, src)
}
func (m *QueryAllPaymentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPaymentRequest proto.InternalMessageInfo

func (m *QueryAllPaymentRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllPaymentResponse defines the QueryAllPaymentResponse message.
type QueryAllPaymentResponse struct {
	Payment    []Payment           `protobuf:"bytes,1,rep,name=payment,proto3" json:"payment"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPaymentResponse) Reset()         { *m = QueryAllPaymentResponse{} }
func (m *QueryAllPaymentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPaymentResponse) ProtoMessage()    {}
func (*QueryAllPaymentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3b6dbafa82e8eb3, []int{9}
}
func (m *QueryAllPaymentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPaymentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPaymentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPaymentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPaymentResponse.Merge(m, src)
}
func (m *QueryAllPaymentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPaymentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPaymentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPaymentResponse proto.InternalMessageInfo

func (m *QueryAllPaymentResponse) GetPayment() []Payment {
	if m != nil {
		return m.Payment
	}
	return nil
}

func (m *QueryAllPaymentResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetSettlementRequest defines the QueryGetSettlementRequest message.
type QueryGetSettlementRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetSettlementRequest) Reset()         { *m = QueryGetSettlementRequest{} }
func (m *QueryGetSettlementRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSettlementRequest) ProtoMessage()    {}
func (*QueryGetSettlementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3b6dbafa82e8eb3, []int{10}
}
func (m *QueryGetSettlementRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSettlementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSettlementRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSettlementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSettlementRequest.Merge(m, src)
}
func (m *QueryGetSettlementRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSettlementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSettlementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSettlementRequest proto.InternalMessageInfo

func (m *QueryGetSettlementRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// QueryGetSettlementResponse defines the QueryGetSettlementResponse message.
type QueryGetSettlementResponse struct {
	Settlement Settlement `protobuf:"bytes,1,opt,name=settlement,proto3" json:"settlement"`
}

func (m *QueryGetSettlementResponse) Reset()         { *m = QueryGetSettlementResponse{} }
func (m *QueryGetSettlementResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSettlementResponse) ProtoMessage()    {}
func (*QueryGetSettlementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3b6dbafa82e8eb3, []int{11}
}
func (m *QueryGetSettlementResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSettlementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSettlementResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSettlementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSettlementResponse.Merge(m, src)
}
func (m *QueryGetSettlementResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSettlementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSettlementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSettlementResponse proto.InternalMessageInfo

func (m *QueryGetSettlementResponse) GetSettlement() Settlement {
	if m != nil {
		return m.Settlement
	}
	return Settlement{}
}

// QueryAllSettlementRequest defines the QueryAllSettlementRequest message.
type QueryAllSettlementRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSettlementRequest) Reset()         { *m = QueryAllSettlementRequest{} }
func (m *QueryAllSettlementRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSettlementRequest) ProtoMessage()    {}
func (*QueryAllSettlementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3b6dbafa82e8eb3, []int{12}
}
func (m *QueryAllSettlementRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSettlementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSettlementRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSettlementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSettlementRequest.Merge(m, src)
}
func (m *QueryAllSettlementRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSettlementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSettlementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSettlementRequest proto.InternalMessageInfo

func (m *QueryAllSettlementRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllSettlementResponse defines the QueryAllSettlementResponse message.
type QueryAllSettlementResponse struct {
	Settlement []Settlement        `protobuf:"bytes,1,rep,name=settlement,proto3" json:"settlement"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSettlementResponse) Reset()         { *m = QueryAllSettlementResponse{} }
func (m *QueryAllSettlementResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSettlementResponse) ProtoMessage()    {}
func (*QueryAllSettlementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3b6dbafa82e8eb3, []int{13}
}
func (m *QueryAllSettlementResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSettlementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSettlementResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSettlementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSettlementResponse.Merge(m, src)
}
func (m *QueryAllSettlementResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSettlementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSettlementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSettlementResponse proto.InternalMessageInfo

func (m *QueryAllSettlementResponse) GetSettlement() []Settlement {
	if m != nil {
		return m.Settlement
	}
	return nil
}

func (m *QueryAllSettlementResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "mycchain.payment.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "mycchain.payment.v1.QueryParamsResponse")
	proto.RegisterType((*QueryGetMerchantRequest)(nil), "mycchain.payment.v1.QueryGetMerchantRequest")
	proto.RegisterType((*QueryGetMerchantResponse)(nil), "mycchain.payment.v1.QueryGetMerchantResponse")
	proto.RegisterType((*QueryAllMerchantRequest)(nil), "mycchain.payment.v1.QueryAllMerchantRequest")
	proto.RegisterType((*QueryAllMerchantResponse)(nil), "mycchain.payment.v1.QueryAllMerchantResponse")
	proto.RegisterType((*QueryGetPaymentRequest)(nil), "mycchain.payment.v1.QueryGetPaymentRequest")
	proto.RegisterType((*QueryGetPaymentResponse)(nil), "mycchain.payment.v1.QueryGetPaymentResponse")
	proto.RegisterType((*QueryAllPaymentRequest)(nil), "mycchain.payment.v1.QueryAllPaymentRequest")
	proto.RegisterType((*QueryAllPaymentResponse)(nil), "mycchain.payment.v1.QueryAllPaymentResponse")
	proto.RegisterType((*QueryGetSettlementRequest)(nil), "mycchain.payment.v1.QueryGetSettlementRequest")
	proto.RegisterType((*QueryGetSettlementResponse)(nil), "mycchain.payment.v1.QueryGetSettlementResponse")
	proto.RegisterType((*QueryAllSettlementRequest)(nil), "mycchain.payment.v1.QueryAllSettlementRequest")
	proto.RegisterType((*QueryAllSettlementResponse)(nil), "mycchain.payment.v1.QueryAllSettlementResponse")
}

func init() { proto.RegisterFile("mycchain/payment/v1/query.proto", fileDescriptor_a3b6dbafa82e8eb3) }

var fileDescriptor_a3b6dbafa82e8eb3 = []byte{
	// 772 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0x4f, 0x4f, 0x13, 0x4f,
	0x18, 0xc7, 0x3b, 0xe5, 0xcf, 0x0f, 0x86, 0x9f, 0x24, 0x0e, 0x44, 0x61, 0x85, 0x6d, 0x9d, 0xf0,
	0xa7, 0xe1, 0xcf, 0x4e, 0x0a, 0x57, 0xa3, 0x81, 0x44, 0xb9, 0x68, 0x82, 0x35, 0xc6, 0x44, 0x2f,
	0x0e, 0xed, 0xa4, 0x6c, 0xb2, 0xdd, 0x2d, 0xdd, 0x85, 0xd0, 0x10, 0x0e, 0xfa, 0x06, 0x34, 0xe1,
	0xa6, 0x07, 0x3d, 0x18, 0xe3, 0xc1, 0x83, 0x2f, 0x83, 0x23, 0x89, 0x17, 0x4f, 0xc6, 0x80, 0x89,
	0x6f, 0xc3, 0x74, 0xe6, 0xd9, 0x2e, 0x65, 0xa7, 0xcb, 0x62, 0x7a, 0x21, 0xc3, 0xf6, 0xfb, 0xcc,
	0x7c, 0xbe, 0xcf, 0x33, 0xfb, 0x6d, 0x71, 0xae, 0xd6, 0x2c, 0x97, 0xb7, 0xb9, 0xed, 0xb2, 0x3a,
	0x6f, 0xd6, 0x84, 0x1b, 0xb0, 0xbd, 0x22, 0xdb, 0xd9, 0x15, 0x8d, 0xa6, 0x55, 0x6f, 0x78, 0x81,
	0x47, 0xc6, 0x42, 0x81, 0x05, 0x02, 0x6b, 0xaf, 0x68, 0x5c, 0xe7, 0x35, 0xdb, 0xf5, 0x98, 0xfc,
	0xab, 0x74, 0xc6, 0x42, 0xd9, 0xf3, 0x6b, 0x9e, 0xcf, 0xb6, 0xb8, 0x2f, 0xd4, 0x06, 0x6c, 0xaf,
	0xb8, 0x25, 0x02, 0x5e, 0x64, 0x75, 0x5e, 0xb5, 0x5d, 0x1e, 0xd8, 0x9e, 0x0b, 0xda, 0xf1, 0xaa,
	0x57, 0xf5, 0xe4, 0x92, 0xb5, 0x56, 0xf0, 0x74, 0xaa, 0xea, 0x79, 0x55, 0x47, 0x30, 0x5e, 0xb7,
	0x19, 0x77, 0x5d, 0x2f, 0x90, 0x25, 0x3e, 0x7c, 0x4a, 0x75, 0xa0, 0x35, 0xd1, 0x28, 0x6f, 0x73,
	0x37, 0x00, 0x4d, 0x5e, 0xa7, 0xa9, 0xf3, 0x06, 0xaf, 0x85, 0xbb, 0xdc, 0xd6, 0x2b, 0x94, 0x31,
	0x25, 0x99, 0xd1, 0x49, 0x7c, 0x11, 0x04, 0x8e, 0x88, 0x54, 0x74, 0x1c, 0x93, 0xc7, 0x2d, 0x93,
	0x9b, 0x72, 0xf7, 0x92, 0xd8, 0xd9, 0x15, 0x7e, 0x40, 0x9f, 0xe2, 0xb1, 0x8e, 0xa7, 0x7e, 0xdd,
	0x73, 0x7d, 0x41, 0xee, 0xe2, 0x41, 0x45, 0x31, 0x81, 0xf2, 0xa8, 0x30, 0xb2, 0x72, 0xcb, 0xd2,
	0x34, 0xd5, 0x52, 0x45, 0xeb, 0xc3, 0xc7, 0x3f, 0x73, 0x99, 0x2f, 0x7f, 0xbe, 0x2d, 0xa0, 0x12,
	0x54, 0x51, 0x86, 0x6f, 0xca, 0x6d, 0x37, 0x44, 0xf0, 0x08, 0x1c, 0xc3, 0x89, 0x64, 0x1c, 0x0f,
	0xd8, 0x6e, 0x45, 0xec, 0xcb, 0x9d, 0x87, 0x4b, 0xea, 0x1f, 0xfa, 0x02, 0x4f, 0xc4, 0x0b, 0x00,
	0xe6, 0x1e, 0x1e, 0x0a, 0xdb, 0x06, 0x38, 0xd3, 0x5a, 0x9c, 0xb0, 0x70, 0xbd, 0xbf, 0x05, 0x54,
	0x6a, 0x17, 0x51, 0x0e, 0x34, 0x6b, 0x8e, 0x73, 0x91, 0xe6, 0x01, 0xc6, 0xd1, 0xb0, 0x61, 0xf7,
	0x39, 0x4b, 0xdd, 0x0c, 0xab, 0x75, 0x33, 0x2c, 0x75, 0xb5, 0xe0, 0x66, 0x58, 0x9b, 0xbc, 0x2a,
	0xa0, 0xb6, 0x74, 0xae, 0x92, 0x7e, 0x42, 0x60, 0xa0, 0xe3, 0x0c, 0xad, 0x81, 0xbe, 0x2b, 0x1b,
	0x20, 0x1b, 0x1d, 0x94, 0x59, 0x49, 0x39, 0x7f, 0x29, 0xa5, 0x3a, 0xbd, 0x03, 0xb3, 0x80, 0x6f,
	0x84, 0x6d, 0xde, 0x54, 0xe7, 0x86, 0x8d, 0x18, 0xc5, 0x59, 0xbb, 0x22, 0x1b, 0xd0, 0x5f, 0xca,
	0xda, 0x15, 0xfa, 0x2c, 0x9a, 0x60, 0x5b, 0x09, 0x76, 0xee, 0xe0, 0xff, 0x00, 0x1a, 0x1a, 0x36,
	0xd5, 0xe5, 0x76, 0xc8, 0x25, 0x98, 0x09, 0x4b, 0xe8, 0x4b, 0x40, 0x58, 0x73, 0x9c, 0x0b, 0x08,
	0xbd, 0x9a, 0xc5, 0x47, 0x14, 0xcd, 0x3b, 0x91, 0xbd, 0xef, 0x8a, 0xec, 0xbd, 0x9b, 0xc3, 0x22,
	0x9e, 0x0c, 0xbb, 0xfb, 0xa4, 0xfd, 0xa2, 0x76, 0x1b, 0x45, 0x19, 0x1b, 0x3a, 0x31, 0x38, 0xba,
	0x8f, 0x71, 0xf4, 0xae, 0x43, 0xd7, 0x72, 0x5a, 0x53, 0x51, 0x31, 0xf8, 0x3a, 0x57, 0x48, 0xcb,
	0x40, 0xb4, 0xe6, 0x38, 0x71, 0xa2, 0x5e, 0x4d, 0xe6, 0x2b, 0x02, 0x2b, 0x17, 0x4e, 0xe9, 0x62,
	0xa5, 0xef, 0x9f, 0xac, 0xf4, 0x6c, 0x4a, 0x2b, 0x9f, 0x87, 0xf0, 0x80, 0xc4, 0x25, 0xaf, 0x10,
	0x1e, 0x54, 0x69, 0x47, 0xe6, 0xb5, 0x40, 0xf1, 0x68, 0x35, 0x0a, 0x97, 0x0b, 0xd5, 0x99, 0x74,
	0xe6, 0xf5, 0xf7, 0xdf, 0x47, 0x59, 0x93, 0x4c, 0xb1, 0x5a, 0xb3, 0xbc, 0xdc, 0xe5, 0xfb, 0x80,
	0xbc, 0x43, 0x78, 0xe4, 0x5c, 0x3c, 0x92, 0xa5, 0xee, 0xfb, 0xc7, 0x63, 0xd7, 0x58, 0x4e, 0xa9,
	0x06, 0x24, 0x4b, 0x22, 0x15, 0xc8, 0x9c, 0x1e, 0x29, 0x4c, 0x26, 0x76, 0x20, 0xe3, 0xfb, 0x90,
	0x1c, 0x21, 0xfc, 0xff, 0x43, 0xdb, 0x4f, 0x45, 0x17, 0x8f, 0xe1, 0x24, 0x3a, 0x4d, 0xa0, 0xd2,
	0x39, 0x49, 0x97, 0x27, 0x66, 0x32, 0x5d, 0x8b, 0x0a, 0x47, 0x01, 0x46, 0x16, 0x13, 0x7b, 0xd0,
	0x99, 0x46, 0xc6, 0x52, 0x3a, 0x31, 0x10, 0x2d, 0x48, 0xa2, 0x19, 0x42, 0xbb, 0x8d, 0x50, 0x2d,
	0x0f, 0xec, 0xca, 0x21, 0x79, 0x83, 0xf0, 0x48, 0xab, 0x57, 0x29, 0xb0, 0x62, 0x21, 0x69, 0x2c,
	0xa5, 0x13, 0x03, 0xd6, 0xac, 0xc4, 0xca, 0x91, 0xe9, 0x44, 0x2c, 0xf2, 0x01, 0xe1, 0x6b, 0x1d,
	0xe9, 0x42, 0xac, 0x44, 0xf7, 0xb1, 0x84, 0x30, 0x58, 0x6a, 0x3d, 0x90, 0x2d, 0x4b, 0xb2, 0x79,
	0x32, 0xab, 0x27, 0x8b, 0x5e, 0x67, 0xd5, 0xb3, 0xf7, 0x08, 0x8f, 0xb6, 0x7a, 0x96, 0x0e, 0x51,
	0x17, 0x62, 0x49, 0x88, 0xda, 0x38, 0xa2, 0x05, 0x89, 0x48, 0x49, 0xfe, 0x32, 0xc4, 0xf5, 0xd5,
	0xe3, 0x53, 0x13, 0x9d, 0x9c, 0x9a, 0xe8, 0xd7, 0xa9, 0x89, 0xde, 0x9e, 0x99, 0x99, 0x93, 0x33,
	0x33, 0xf3, 0xe3, 0xcc, 0xcc, 0x3c, 0x9f, 0x8c, 0x4a, 0xf7, 0xdb, 0xc5, 0x41, 0xb3, 0x2e, 0xfc,
	0xad, 0x41, 0xf9, 0xbb, 0x6c, 0xf5, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x37, 0x69, 0x5d, 0x36,
	0xd1, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// ListMerchant Queries a list of Merchant items.
	GetMerchant(ctx context.Context, in *QueryGetMerchantRequest, opts ...grpc.CallOption) (*QueryGetMerchantResponse, error)
	// ListMerchant defines the ListMerchant RPC.
	ListMerchant(ctx context.Context, in *QueryAllMerchantRequest, opts ...grpc.CallOption) (*QueryAllMerchantResponse, error)
	// ListPayment Queries a list of Payment items.
	GetPayment(ctx context.Context, in *QueryGetPaymentRequest, opts ...grpc.CallOption) (*QueryGetPaymentResponse, error)
	// ListPayment defines the ListPayment RPC.
	ListPayment(ctx context.Context, in *QueryAllPaymentRequest, opts ...grpc.CallOption) (*QueryAllPaymentResponse, error)
	// ListSettlement Queries a list of Settlement items.
	GetSettlement(ctx context.Context, in *QueryGetSettlementRequest, opts ...grpc.CallOption) (*QueryGetSettlementResponse, error)
	// ListSettlement defines the ListSettlement RPC.
	ListSettlement(ctx context.Context, in *QueryAllSettlementRequest, opts ...grpc.CallOption) (*QueryAllSettlementResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/mycchain.payment.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetMerchant(ctx context.Context, in *QueryGetMerchantRequest, opts ...grpc.CallOption) (*QueryGetMerchantResponse, error) {
	out := new(QueryGetMerchantResponse)
	err := c.cc.Invoke(ctx, "/mycchain.payment.v1.Query/GetMerchant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListMerchant(ctx context.Context, in *QueryAllMerchantRequest, opts ...grpc.CallOption) (*QueryAllMerchantResponse, error) {
	out := new(QueryAllMerchantResponse)
	err := c.cc.Invoke(ctx, "/mycchain.payment.v1.Query/ListMerchant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPayment(ctx context.Context, in *QueryGetPaymentRequest, opts ...grpc.CallOption) (*QueryGetPaymentResponse, error) {
	out := new(QueryGetPaymentResponse)
	err := c.cc.Invoke(ctx, "/mycchain.payment.v1.Query/GetPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListPayment(ctx context.Context, in *QueryAllPaymentRequest, opts ...grpc.CallOption) (*QueryAllPaymentResponse, error) {
	out := new(QueryAllPaymentResponse)
	err := c.cc.Invoke(ctx, "/mycchain.payment.v1.Query/ListPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetSettlement(ctx context.Context, in *QueryGetSettlementRequest, opts ...grpc.CallOption) (*QueryGetSettlementResponse, error) {
	out := new(QueryGetSettlementResponse)
	err := c.cc.Invoke(ctx, "/mycchain.payment.v1.Query/GetSettlement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListSettlement(ctx context.Context, in *QueryAllSettlementRequest, opts ...grpc.CallOption) (*QueryAllSettlementResponse, error) {
	out := new(QueryAllSettlementResponse)
	err := c.cc.Invoke(ctx, "/mycchain.payment.v1.Query/ListSettlement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// ListMerchant Queries a list of Merchant items.
	GetMerchant(context.Context, *QueryGetMerchantRequest) (*QueryGetMerchantResponse, error)
	// ListMerchant defines the ListMerchant RPC.
	ListMerchant(context.Context, *QueryAllMerchantRequest) (*QueryAllMerchantResponse, error)
	// ListPayment Queries a list of Payment items.
	GetPayment(context.Context, *QueryGetPaymentRequest) (*QueryGetPaymentResponse, error)
	// ListPayment defines the ListPayment RPC.
	ListPayment(context.Context, *QueryAllPaymentRequest) (*QueryAllPaymentResponse, error)
	// ListSettlement Queries a list of Settlement items.
	GetSettlement(context.Context, *QueryGetSettlementRequest) (*QueryGetSettlementResponse, error)
	// ListSettlement defines the ListSettlement RPC.
	ListSettlement(context.Context, *QueryAllSettlementRequest) (*QueryAllSettlementResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GetMerchant(ctx context.Context, req *QueryGetMerchantRequest) (*QueryGetMerchantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchant not implemented")
}
func (*UnimplementedQueryServer) ListMerchant(ctx context.Context, req *QueryAllMerchantRequest) (*QueryAllMerchantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMerchant not implemented")
}
func (*UnimplementedQueryServer) GetPayment(ctx context.Context, req *QueryGetPaymentRequest) (*QueryGetPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayment not implemented")
}
func (*UnimplementedQueryServer) ListPayment(ctx context.Context, req *QueryAllPaymentRequest) (*QueryAllPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPayment not implemented")
}
func (*UnimplementedQueryServer) GetSettlement(ctx context.Context, req *QueryGetSettlementRequest) (*QueryGetSettlementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettlement not implemented")
}
func (*UnimplementedQueryServer) ListSettlement(ctx context.Context, req *QueryAllSettlementRequest) (*QueryAllSettlementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSettlement not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycchain.payment.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycchain.payment.v1.Query/GetMerchant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetMerchant(ctx, req.(*QueryGetMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycchain.payment.v1.Query/ListMerchant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListMerchant(ctx, req.(*QueryAllMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycchain.payment.v1.Query/GetPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPayment(ctx, req.(*QueryGetPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycchain.payment.v1.Query/ListPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListPayment(ctx, req.(*QueryAllPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetSettlement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSettlementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetSettlement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycchain.payment.v1.Query/GetSettlement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetSettlement(ctx, req.(*QueryGetSettlementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListSettlement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSettlementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListSettlement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycchain.payment.v1.Query/ListSettlement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListSettlement(ctx, req.(*QueryAllSettlementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mycchain.payment.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetMerchant",
			Handler:    _Query_GetMerchant_Handler,
		},
		{
			MethodName: "ListMerchant",
			Handler:    _Query_ListMerchant_Handler,
		},
		{
			MethodName: "GetPayment",
			Handler:    _Query_GetPayment_Handler,
		},
		{
			MethodName: "ListPayment",
			Handler:    _Query_ListPayment_Handler,
		},
		{
			MethodName: "GetSettlement",
			Handler:    _Query_GetSettlement_Handler,
		},
		{
			MethodName: "ListSettlement",
			Handler:    _Query_ListSettlement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mycchain/payment/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetMerchantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMerchantRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMerchantRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMerchantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMerchantResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMerchantResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Merchant.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllMerchantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMerchantRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMerchantRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllMerchantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMerchantResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMerchantResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Merchant) > 0 {
		for iNdEx := len(m.Merchant) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Merchant[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPaymentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPaymentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPaymentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPaymentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPaymentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPaymentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Payment.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPaymentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPaymentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPaymentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPaymentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPaymentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPaymentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Payment) > 0 {
		for iNdEx := len(m.Payment) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Payment[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSettlementRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSettlementRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSettlementRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSettlementResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSettlementResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSettlementResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Settlement.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSettlementRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSettlementRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSettlementRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSettlementResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSettlementResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSettlementResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Settlement) > 0 {
		for iNdEx := len(m.Settlement) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Settlement[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetMerchantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMerchantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Merchant.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllMerchantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllMerchantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Merchant) > 0 {
		for _, e := range m.Merchant {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPaymentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetPaymentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Payment.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPaymentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPaymentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Payment) > 0 {
		for _, e := range m.Payment {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSettlementRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetSettlementResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Settlement.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSettlementRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSettlementResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Settlement) > 0 {
		for _, e := range m.Settlement {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMerchantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMerchantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMerchantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMerchantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMerchantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMerchantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merchant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Merchant.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMerchantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMerchantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMerchantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMerchantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMerchantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMerchantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merchant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Merchant = append(m.Merchant, Merchant{})
			if err := m.Merchant[len(m.Merchant)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPaymentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPaymentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPaymentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPaymentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPaymentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPaymentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Payment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPaymentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPaymentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPaymentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPaymentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPaymentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPaymentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payment = append(m.Payment, Payment{})
			if err := m.Payment[len(m.Payment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSettlementRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSettlementRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSettlementRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSettlementResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSettlementResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSettlementResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settlement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Settlement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSettlementRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSettlementRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSettlementRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSettlementResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSettlementResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSettlementResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settlement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Settlement = append(m.Settlement, Settlement{})
			if err := m.Settlement[len(m.Settlement)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
